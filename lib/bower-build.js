// Generated by CoffeeScript 1.7.1
(function() {
  var CWD, fs, gatherDependencies, getLibBowers, getMainPaths, loadAllFiles, main, p, path,
    __slice = [].slice;

  fs = require('fs');

  path = require('path');

  CWD = process.cwd();

  p = function() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    console.log.apply(console, args);
    if (args.length > 1) {
      return args;
    } else {
      return args[0];
    }
  };

  getLibBowers = function(bowerFile, bowerPath, dependentType) {
    var k, lib, libBower, override, v, ver, _ref, _ref1, _results;
    _ref = bowerFile[dependentType];
    _results = [];
    for (lib in _ref) {
      ver = _ref[lib];
      libBower = require(path.join(CWD, "" + bowerPath + "/" + lib + "/.bower.json"));
      override = (_ref1 = bowerFile.overrides) != null ? _ref1[lib] : void 0;
      if (override != null) {
        for (k in override) {
          v = override[k];
          libBower[k] = v;
        }
      }
      _results.push(libBower);
    }
    return _results;
  };

  gatherDependencies = function(libBowers) {
    var bowerFile, childDependentLibs, dpc, k, v, _i, _len;
    childDependentLibs = {};
    for (_i = 0, _len = libBowers.length; _i < _len; _i++) {
      bowerFile = libBowers[_i];
      dpc = bowerFile[target_dependent];
      for (k in dpc) {
        v = dpc[k];
        childDependentLibs[k] = v;
      }
    }
    return childDependentLibs;
  };

  getMainPaths = function(libBowers, bowerPath) {
    var i, libBower, main, paths, _i, _j, _len, _len1, _originalSource;
    paths = [];
    for (_i = 0, _len = libBowers.length; _i < _len; _i++) {
      libBower = libBowers[_i];
      main = libBower.main, _originalSource = libBower._originalSource;
      if (typeof main === 'string') {
        paths.push(path.join(CWD, "" + bowerPath + "/" + _originalSource + "/" + main));
      } else if (main != null ? main.length : void 0) {
        for (_j = 0, _len1 = main.length; _j < _len1; _j++) {
          i = main[_j];
          paths.push(path.join(CWD, "" + bowerPath + "/" + _originalSource + "/" + i));
        }
      }
    }
    return paths;
  };

  loadAllFiles = function(paths) {
    var _i, _len, _results;
    _results = [];
    for (_i = 0, _len = paths.length; _i < _len; _i++) {
      p = paths[_i];
      _results.push(fs.readFileSync(p).toString());
    }
    return _results;
  };

  module.exports = main = function(_arg) {
    var bowerPath, debug, dest, dev, ext, extPaths, extnames, fname, libBowers, mainBower, out, outdir, paths, prefix, result, target_dependent, v, _i, _len, _results;
    dev = _arg.dev, out = _arg.out, prefix = _arg.prefix, debug = _arg.debug;
    mainBower = require(path.join(CWD, 'bower.json'));
    bowerPath = 'bower_components';
    target_dependent = dev ? 'devDependencies' : 'dependencies';
    libBowers = getLibBowers(mainBower, bowerPath, target_dependent);
    paths = getMainPaths(libBowers, bowerPath);
    extnames = {};
    for (_i = 0, _len = paths.length; _i < _len; _i++) {
      p = paths[_i];
      ext = path.extname(p);
      if (ext) {
        extnames[ext] = true;
      }
    }
    _results = [];
    for (ext in extnames) {
      v = extnames[ext];
      extPaths = paths.filter(function(p) {
        return path.extname(p) === ext;
      });
      outdir = out ? path.join(CWD, out) : CWD;
      fname = (prefix || 'vendor') + ext;
      dest = path.join(outdir, fname);
      result = (loadAllFiles(extPaths)).join('\n');
      fs.writeFileSync(dest, result);
      if (debug) {
        _results.push(console.log('write:', dest));
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  };

}).call(this);
